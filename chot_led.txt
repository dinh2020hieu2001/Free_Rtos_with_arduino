#include <Arduino_FreeRTOS.h>
#include <queue.h>
#include <task.h>
#include <Wire.h>
#define R1  4
#define G1  5
#define B1  6
#define R2  7
#define G2  8
#define B2  9
#define CLK 10
#define OE  11
#define STB 12
#define A   A0
#define B   A1
#define C   A2
#define RTC 0x68
#define MAX_X 32      //  chiều dài của matrix led
#define MAX_Y 16      // chiều rộng của matrix led
unsigned char Graphic_x =0 , Graphic_y = 0;  // vị trí con trỏ 
///int8_t a = 1
unsigned char Buffer_display[3][16][4]= {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,};
byte second, minute, hour, day, wday, month, year;
const char font [][7] PROGMEM={
0x00,0x00,0x00,0x00,0x00,0x00,0x00, //  32
0x10,0x38,0x38,0x10,0x10,0x00,0x10, //! 33
0x6C,0x6C,0x48,0x00,0x00,0x00,0x00, //" 34
0x00,0x28,0x7C,0x28,0x28,0x7C,0x28, //# 35
0x20,0x38,0x40,0x30,0x08,0x70,0x10, //$ 36
0x64,0x64,0x08,0x10,0x20,0x4C,0x4C, //% 37
0x20,0x50,0x50,0x20,0x54,0x48,0x34, //& 38
0x30,0x30,0x20,0x00,0x00,0x00,0x00, //' 39
0x10,0x20,0x20,0x20,0x20,0x20,0x10, //( 40
0x20,0x10,0x10,0x10,0x10,0x10,0x20, //) 41
0x00,0x28,0x38,0x7C,0x38,0x28,0x00, //* 42
0x00,0x10,0x10,0x7C,0x10,0x10,0x00, //+ 43
0x00,0x00,0x00,0x00,0x00,0x30,0x30, //, 44
0x00,0x00,0x00,0x7C,0x00,0x00,0x00, //- 45
0x00,0x00,0x00,0x00,0x00,0x30,0x30, //. 46
0x00,0x04,0x08,0x10,0x20,0x40,0x00, /// 47
0x38,0x44,0x4C,0x54,0x64,0x44,0x38, //0 48
0x00,0x04,0x08,0x10,0x20,0x40,0x00, //1 49
0x38,0x44,0x04,0x18,0x20,0x40,0x7C, //2 50
0x38,0x44,0x04,0x38,0x04,0x44,0x38, //3 51
0x08,0x18,0x28,0x48,0x7C,0x08,0x08, //4 52
0x7C,0x40,0x40,0x78,0x04,0x44,0x38, //5 53
0x18,0x20,0x40,0x78,0x44,0x44,0x38, //6 54
0x7C,0x04,0x08,0x10,0x20,0x20,0x20, //7 55
0x38,0x44,0x44,0x38,0x44,0x44,0x38, //8 56
0x38,0x44,0x44,0x3C,0x04,0x08,0x30, //9 57
0x00,0x00,0x40,0x40,0x00,0x40,0x40, //: 58
0x00,0x00,0x40,0x40,0x00,0x40,0x40, //; 59
0x08,0x10,0x20,0x40,0x20,0x10,0x08, //< 60
0x00,0x00,0x7C,0x00,0x00,0x7C,0x00, //= 61
0x20,0x10,0x08,0x04,0x08,0x10,0x20, //> 62
0x38,0x44,0x04,0x18,0x10,0x00,0x10, //? 63
0x38,0x44,0x5C,0x54,0x5C,0x40,0x38, //@ 64
0x38,0x44,0x44,0x44,0x7C,0x44,0x44, //A 65
0x78,0x44,0x44,0x78,0x44,0x44,0x78, //B 66
0x38,0x44,0x40,0x40,0x40,0x44,0x38, //C 67
0x78,0x44,0x44,0x44,0x44,0x44,0x78, //D 68
0x7C,0x40,0x40,0x78,0x40,0x40,0x7C, //E 69
0x7C,0x40,0x40,0x78,0x40,0x40,0x40, //F 70
0x38,0x44,0x40,0x5C,0x44,0x44,0x3C, //G 71
0x44,0x44,0x44,0x7C,0x44,0x44,0x44, //H 72
0x38,0x10,0x10,0x10,0x10,0x10,0x38, //I 73
0x04,0x04,0x04,0x04,0x44,0x44,0x38, //J 74
0x44,0x48,0x50,0x60,0x50,0x48,0x44, //K 75
0x40,0x40,0x40,0x40,0x40,0x40,0x7C, //L 76
0x44,0x6C,0x54,0x44,0x44,0x44,0x44, //M 77
0x44,0x64,0x54,0x4C,0x44,0x44,0x44, //N 78
0x38,0x44,0x44,0x44,0x44,0x44,0x38, //O 79
0x78,0x44,0x44,0x78,0x40,0x40,0x40, //P 80
0x38,0x44,0x44,0x44,0x54,0x48,0x34, //Q 81
0x78,0x44,0x44,0x78,0x48,0x44,0x44, //R 82
0x38,0x44,0x40,0x38,0x04,0x44,0x38, //S 83
0x7C,0x10,0x10,0x10,0x10,0x10,0x10, //T 84
0x44,0x44,0x44,0x44,0x44,0x44,0x38, //U 85
0x44,0x44,0x44,0x44,0x44,0x28,0x10, //V 86
0x44,0x44,0x54,0x54,0x54,0x54,0x28, //W 87
0x44,0x44,0x28,0x10,0x28,0x44,0x44, //X 88
0x44,0x44,0x44,0x28,0x10,0x10,0x10, //Y 89
0x78,0x08,0x10,0x20,0x40,0x40,0x78, //Z 90
0x38,0x20,0x20,0x20,0x20,0x20,0x38, //[ 91
0x00,0x40,0x20,0x10,0x08,0x04,0x00, //\ 92
0x38,0x08,0x08,0x08,0x08,0x08,0x38, //] 93
0x10,0x28,0x44,0x00,0x00,0x00,0x00, //^ 94
0x00,0x00,0x00,0x00,0x00,0x00,0x7C, //_ 95
0x30,0x30,0x10,0x00,0x00,0x00,0x00, //` 96
0x00,0x00,0x38,0x04,0x3C,0x44,0x3C, //a 97
0x40,0x40,0x78,0x44,0x44,0x44,0x78, //b 98
0x00,0x00,0x38,0x44,0x40,0x44,0x38, //c 99
0x04,0x04,0x3C,0x44,0x44,0x44,0x3C, //d 100
0x00,0x00,0x38,0x44,0x78,0x40,0x38, //e 101
0x18,0x20,0x20,0x78,0x20,0x20,0x20, //f 102
0x00,0x3C,0x44,0x44,0x3C,0x04,0x38, //g 103
0x40,0x40,0x70,0x48,0x48,0x48,0x48, //h 104
0x10,0x00,0x10,0x10,0x10,0x10,0x18, //i 105
0x08,0x00,0x18,0x08,0x08,0x48,0x30, //j 106
0x40,0x40,0x48,0x50,0x60,0x50,0x48, //k 107
0x20,0x20,0x20,0x20,0x20,0x20,0x38, //l 108
0x00,0x00,0x68,0x54,0x54,0x44,0x44, //m 109
0x00,0x00,0x70,0x48,0x48,0x48,0x48, //n 110
0x00,0x00,0x38,0x44,0x44,0x44,0x38, //o 111
0x00,0x78,0x44,0x44,0x44,0x78,0x40, //p 112
0x00,0x3C,0x44,0x44,0x44,0x3C,0x04, //q 113
0x00,0x00,0x58,0x24,0x20,0x20,0x70, //r 114
0x00,0x00,0x38,0x40,0x38,0x04,0x38, //s 115
0x00,0x20,0x78,0x20,0x20,0x28,0x10, //t 116
0x00,0x00,0x48,0x48,0x48,0x58,0x28, //u 117
0x00,0x00,0x44,0x44,0x44,0x28,0x10, //v 118
0x00,0x00,0x44,0x44,0x54,0x7C,0x28, //w 119
0x00,0x00,0x48,0x48,0x30,0x48,0x48, //x 120
0x00,0x48,0x48,0x48,0x38,0x10,0x60, //y 121
0x00,0x00,0x78,0x08,0x30,0x40,0x78, //z 122
0x18,0x20,0x20,0x60,0x20,0x20,0x18, //{ 123
0x10,0x10,0x10,0x10,0x10,0x10,0x10, //| 124
0x30,0x08,0x08,0x0C,0x08,0x08,0x30, //} 125
0x00,0x00,0x28,0x50,0x00,0x00,0x00, //~ 126
};
void setup (){
   Serial.begin(9600);
   pinMode (G1, OUTPUT);// cài đặt chế độ hoạt động của các chân
   pinMode (R1, OUTPUT);
   pinMode (B1, OUTPUT);
   pinMode (R2, OUTPUT);
   pinMode (G2, OUTPUT);
   pinMode (B2, OUTPUT);
   pinMode (A,  OUTPUT);
   pinMode (B,  OUTPUT);
   pinMode (C,  OUTPUT);
   pinMode (CLK, OUTPUT);
   pinMode (OE,  OUTPUT);
   pinMode (STB, OUTPUT);
   clear_display ();
   set_pixel (9,9,0x02);
   put_char ('W',0x03);
   xTaskCreate (xtask,"1",128,NULL,1,NULL);
}
void loop (){
  
}
void xtask (void *pv ){
   while (1){
      quet_led();
   }
}
void data_transfet (char byte_r1, char byte_g1, char byte_b1, char byte_r2, char byte_g2, char byte_b2 ){ // chyển dữ liệu vào màn hình
   unsigned char i, mask;
   for (i = 0; i < 8; i++){
      mask = 0x80 >> i;
      digitalWrite (R1, byte_r1 & mask);
      digitalWrite (G1, byte_g1 & mask);
      digitalWrite (B1, byte_b1 & mask);
      digitalWrite (R2, byte_r2 & mask);
      digitalWrite (G2, byte_g2 & mask);
      digitalWrite (B2, byte_b2 & mask);
      digitalWrite (CLK, LOW); digitalWrite (CLK, HIGH); // tạo xung clk cho phép chuyển dữ liệu
   }
}
void rows (unsigned char row_number){  // chọn hàng được sáng
   switch (row_number){
      case 0:{ digitalWrite(A, LOW);digitalWrite (B, LOW); digitalWrite (C, LOW);break;}
      case 1:{ digitalWrite(A, HIGH);digitalWrite (B, LOW); digitalWrite (C, LOW);break;}
      case 2:{ digitalWrite(A, LOW);digitalWrite (B, HIGH); digitalWrite (C, LOW);break;}
      case 3:{ digitalWrite(A, HIGH);digitalWrite (B, HIGH); digitalWrite (C, LOW);break;}
      case 4:{ digitalWrite(A, LOW);digitalWrite (B, LOW); digitalWrite (C, HIGH);break;}
      case 5:{ digitalWrite(A, HIGH);digitalWrite (B, LOW); digitalWrite (C, HIGH);break;}
      case 6:{ digitalWrite(A, LOW);digitalWrite (B, HIGH); digitalWrite (C, HIGH);break;}
      case 7:{ digitalWrite(A, HIGH);digitalWrite (B, HIGH); digitalWrite (C, HIGH);break;}
   }
}
void quet_led(void){
   static unsigned char z = 0;// biến đếm hàng;
   unsigned char i;
   digitalWrite (OE, HIGH); // tắt hết LED
   for (i = 0; i < 4; i++){
      data_transfet (Buffer_display[0][z][i], Buffer_display[1][z][i],
                     Buffer_display[2][z][i], Buffer_display[0][z+8][i],
                     Buffer_display[1][z+8][i], Buffer_display[2][z+8][i]);
   }
   rows(z);
   digitalWrite (STB, LOW); digitalWrite (STB, HIGH);
   digitalWrite (OE, LOW);// bật LED
   z++;
   if (z == 8) z = 0;
   delay(1);
}

void set_pixel (unsigned char x, unsigned char y, unsigned char color) {
   if (x >31 || x <0 || y >15|| y <0) return;
   if ((color & 0x01) != 0)  Buffer_display [0][y][x/8] = Buffer_display[0][y][x/8] | (0x80 >> (x %8));
   else Buffer_display[0][y][x/8] = Buffer_display[0][y][x/8] & (~(0x80 >> (x %8)));
   
   if ((color & 0x02) != 0)  Buffer_display [1][y][x/8] = Buffer_display[1][y][x/8] | (0x80 >> (x %8));
   else Buffer_display[1][y][x/8] =Buffer_display[1][y][x/8] & (~(0x80 >> (x %8)));
   
   if ((color & 0x04) != 0)  Buffer_display [2][y][x/8] = Buffer_display[2][y][x/8] | (0x80 >> (x %8));
   else Buffer_display[2][y][x/8] =Buffer_display[2][y][x/8] & (~(0x80 >> (x %8)));
}
void clear_display (){
   unsigned char i, j, k;
   for (i = 0;i < 3; i++)
   for (j =0; j < 32; j++)
   for (k =0; k < 4; k++)Buffer_display [i][j][k] = 0x00;

}
void set_xy (unsigned char x, unsigned char y){
   Graphic_x = x;
   Graphic_y = y;
}

void put_char (char txt, char color){
   char x, y, z = txt-32,f[7];
   f[0] = font [z][0];
   f[1] = font [z][1];
   f[2] = font [z][2];
   f[3] = font [z][3];
   f[4] = font [z][4];
   f[5] = font [z][5];
   f[6] = font [z][6];
   for (y = 0; y <7; y++){
      for (x = 0 ; x < 5; x++) {
         if ((f[y] & (0x40 >> x) ) != 0) set_pixel (x + Graphic_x, y +Graphic_y, color);
         else set_pixel (x + Graphic_x, y +Graphic_y ,0x00);
      }
   }
}

void read_RTC () {
   Wire.beginTransmission(RTC);
   Wire.write((byte) 0x00);
   Wire.endTransmission ();
   Wire.requestFrom(RTC, 7);

   second = Wire.read () & 0x7f;
   minute = Wire.read ();
   hour = Wire.read ();
   wday = Wire.read ();
   day = Wire.read ();
   month = Wire.read ();
   year = Wire.read();
}