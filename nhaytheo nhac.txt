#include <avr/interrupt.h>
#include <Arduino_FreeRTOS.h>
#include <queue.h>

#define R1  4
#define G1  5
#define B1  6
#define R2  7
#define G2  8
#define B2  9
#define CLK 10
#define OE  11
#define STB 12
#define A   A0
#define B   A1
#define C   A2
#define M   A3
unsigned char Buffer_display[3][16][4];
char col[32];
char row[16];
char color_row[4] = {0x04, 0x03, 0x05, 0x01};
const char font [][7] ={
0x38,0x44,0x4C,0x54,0x64,0x44,0x38, //0 48
0x10,0x30,0x10,0x10,0x10,0x10,0x38, //1 49
0x38,0x44,0x04,0x18,0x20,0x40,0x7C, //2 50
0x38,0x44,0x04,0x38,0x04,0x44,0x38, //3 51
0x08,0x18,0x28,0x48,0x7C,0x08,0x08, //4 52
0x7C,0x40,0x40,0x78,0x04,0x44,0x38, //5 53
0x18,0x20,0x40,0x78,0x44,0x44,0x38, //6 54
0x7C,0x04,0x08,0x10,0x20,0x20,0x20, //7 55
0x38,0x44,0x44,0x38,0x44,0x44,0x38, //8 56
0x38,0x44,0x44,0x3C,0x04,0x08,0x30, //9 57
0x00,0x60,0x60,0x00,0x60,0x60,0x00, //: 58
0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
ISR (TIMER1_OVF_vect) //Chương trình ngắt Timer1
{ 
   static unsigned char z = 0;// biến đếm hàng;
   unsigned char i;
   digitalWrite (OE, HIGH); // tắt hết LED
   for (i = 0; i < 4; i++){
      data_transfet (Buffer_display[0][z][i], Buffer_display[1][z][i],
                     Buffer_display[2][z][i], Buffer_display[0][z+8][i],
                     Buffer_display[1][z+8][i], Buffer_display[2][z+8][i]);
   }
   rows(z);
   digitalWrite (STB, LOW); digitalWrite (STB, HIGH);
   digitalWrite (OE, LOW);// bật LED
   z++;
   if (z == 8) z = 0;
   delay(1);
   TCNT1= 65300;
}
void setup() {
    Serial.begin (9600);
    pinMode (G1, OUTPUT);// cài đặt chế độ hoạt động của các chân
    pinMode (R1, OUTPUT);
    pinMode (B1, OUTPUT);
    pinMode (R2, OUTPUT);
    pinMode (G2, OUTPUT);
    pinMode (B2, OUTPUT);
    pinMode (A,  OUTPUT);
    pinMode (B,  OUTPUT);
    pinMode (C,  OUTPUT);
    pinMode (CLK, OUTPUT);
    pinMode (OE,  OUTPUT);
    pinMode (STB, OUTPUT);
    pinMode (M, INPUT);
    cli(); //Tắt ngắt toàn cục
    TCCR1A = 0; //Reset Timer1
    TCCR1B = 0;      
    TIMSK1 = 0;
    //Setup Timer1
    TCCR1B |= (1 << CS11); //Chọn prescaler 1024 CS12=1,CS10=1 xem bảng phía trên
    TCNT1= 65500; //Giá trị tính toán phía trên
    TIMSK1 |= (1 << TOIE1); //Overflow interrupt enable
    //sei(); //Cho phép ngắt toàn cục
    set_pixel(2,3,0x02);
    xTaskCreate (taskDanceMusic,"1", 128, NULL, 2, NULL);
}

void loop(){}
void taskDanceMusic (void *pv){
   int i, sensor;
   while (1){
      for (i =0; i<32;i++){
         sensor = analogRead(M);
         if (sensor > 792) sensor = sensor -792;
         else sensor = 792 - sensor;
         sensor = sqrt(sensor);
         drawRow (i,sensor);
      }
   }
}
void data_transfet (char byte_r1, char byte_g1, char byte_b1, char byte_r2, char byte_g2, char byte_b2 ){ // chyển dữ liệu vào màn hình
   unsigned char i, mask;
   for (i = 0; i < 8; i++){
      mask = 0x80 >> i;
      digitalWrite (R1, byte_r1 & mask);
      digitalWrite (G1, byte_g1 & mask);
      digitalWrite (B1, byte_b1 & mask);
      digitalWrite (R2, byte_r2 & mask);
      digitalWrite (G2, byte_g2 & mask);
      digitalWrite (B2, byte_b2 & mask);
      digitalWrite (CLK, LOW); digitalWrite (CLK, HIGH); // tạo xung clk cho phép chuyển dữ liệu
   }
}
void rows (unsigned char row_number){  // chọn hàng được sáng
   switch (row_number){
      case 0:{ digitalWrite(A, LOW);digitalWrite (B, LOW); digitalWrite (C, LOW);break;}
      case 1:{ digitalWrite(A, HIGH);digitalWrite (B, LOW); digitalWrite (C, LOW);break;}
      case 2:{ digitalWrite(A, LOW);digitalWrite (B, HIGH); digitalWrite (C, LOW);break;}
      case 3:{ digitalWrite(A, HIGH);digitalWrite (B, HIGH); digitalWrite (C, LOW);break;}
      case 4:{ digitalWrite(A, LOW);digitalWrite (B, LOW); digitalWrite (C, HIGH);break;}
      case 5:{ digitalWrite(A, HIGH);digitalWrite (B, LOW); digitalWrite (C, HIGH);break;}
      case 6:{ digitalWrite(A, LOW);digitalWrite (B, HIGH); digitalWrite (C, HIGH);break;}
      case 7:{ digitalWrite(A, HIGH);digitalWrite (B, HIGH); digitalWrite (C, HIGH);break;}
   }
}
void set_pixel (unsigned char x, unsigned char y, unsigned char color) {
   if (x >31 || x <0 || y >15|| y <0) return;
   if ((color & 0x01) != 0)  Buffer_display [0][y][x/8] = Buffer_display[0][y][x/8] | (0x80 >> (x %8));
   else Buffer_display[0][y][x/8] = Buffer_display[0][y][x/8] & (~(0x80 >> (x %8)));
   
   if ((color & 0x02) != 0)  Buffer_display [1][y][x/8] = Buffer_display[1][y][x/8] | (0x80 >> (x %8));
   else Buffer_display[1][y][x/8] =Buffer_display[1][y][x/8] & (~(0x80 >> (x %8)));
   
   if ((color & 0x04) != 0)  Buffer_display [2][y][x/8] = Buffer_display[2][y][x/8] | (0x80 >> (x %8));
   else Buffer_display[2][y][x/8] =Buffer_display[2][y][x/8] & (~(0x80 >> (x %8)));
}
void put_char (int i, int j, char txt, char color){
   char x =0, y=0, z = txt,f[7];
   f[0] = font [z][0];
   f[1] = font [z][1];
   f[2] = font [z][2];
   f[3] = font [z][3];
   f[4] = font [z][4];
   f[5] = font [z][5];
   f[6] = font [z][6]; 
   for (y = 0; y <7; y++){
      for (x = 0 ; x < 5; x++) {
         if ((f[y] & (0x40 >> x) ) != 0) set_pixel (x + i, y +j, color);
         else set_pixel (x + i, y +j ,0x00);
      }
   }
}
void drawRow(int x, int height){
   int i;
   if (height > 14) height = 14;
   height = 15 - height;
   for (i = height; i<col[x]; i++) set_pixel(x,i,color_row[height / 4]);
   for (i = col[x]; i< height;i++) set_pixel(x,i,0x00);
   col[x] = height;
}