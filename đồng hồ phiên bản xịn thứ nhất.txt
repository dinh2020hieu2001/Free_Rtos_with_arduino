#include <avr/interrupt.h>
#include <Arduino_FreeRTOS.h>
#include <queue.h>
#include <Wire.h>
#include <stdlib.h>
#define R1  4
#define G1  5
#define B1  6
#define R2  7
#define G2  8
#define B2  9
#define CLK 10
#define OE  11
#define STB 12
#define A   A0
#define B   A1
#define C   A2
#define M   A3
unsigned char Buffer_display[3][16][4];
TaskHandle_t animationHandle = NULL;
TaskHandle_t danceOfMusicHandle = NULL;
TaskHandle_t realTimeHandle = NULL;
char col[32];
int wday, day, month, year;
char color_row[4] = {0x01, 0x03, 0x06, 0x02};
const char font [][7] ={
0x38,0x44,0x4C,0x54,0x64,0x44,0x38, //0 48
0x10,0x30,0x10,0x10,0x10,0x10,0x38, //1 49
0x38,0x44,0x04,0x18,0x20,0x40,0x7C, //2 50
0x38,0x44,0x04,0x38,0x04,0x44,0x38, //3 51
0x08,0x18,0x28,0x48,0x7C,0x08,0x08, //4 52
0x7C,0x40,0x40,0x78,0x04,0x44,0x38, //5 53
0x18,0x20,0x40,0x78,0x44,0x44,0x38, //6 54
0x7C,0x04,0x08,0x10,0x20,0x20,0x20, //7 55
0x38,0x44,0x44,0x38,0x44,0x44,0x38, //8 56
0x38,0x44,0x44,0x3C,0x04,0x08,0x30, //9 57
0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
const char dayOfTheWeek[7][3][7]= {
0x38,0x44,0x40,0x38,0x04,0x44,0x38,0x00,0x00,0x48,0x48,0x48,0x58,0x28,0x00,0x00,0x68,0x54,0x54,0x44,0x44,// Su 
0x44,0x6C,0x54,0x44,0x44,0x44,0x44,0x00,0x00,0x38,0x44,0x44,0x44,0x38,0x00,0x00,0x70,0x48,0x48,0x48,0x48,// Mo
0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x48,0x48,0x48,0x58,0x28,0x00,0x00,0x38,0x40,0x38,0x04,0x38,// Tu
0x44,0x44,0x54,0x54,0x54,0x54,0x28,0x00,0x00,0x38,0x44,0x78,0x40,0x38,0x00,0x00,0x70,0x48,0x48,0x48,0x48,// We
0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x40,0x40,0x70,0x48,0x48,0x48,0x48,0x00,0x00,0x48,0x48,0x48,0x58,0x28,// Th
0x7C,0x40,0x40,0x78,0x40,0x40,0x40,0x00,0x00,0x58,0x24,0x20,0x20,0x70,0x10,0x00,0x10,0x10,0x10,0x10,0x18,// Fr
0x38,0x44,0x40,0x38,0x04,0x44,0x38,0x00,0x00,0x38,0x04,0x3C,0x44,0x3C,0x00,0x20,0x78,0x20,0x20,0x28,0x10,// Sa
};
const char miniFont [][3] = {
0xf8, 0x88, 0xf8,// 0
0x40, 0xf8, 0x00,// 1
0xb8, 0xa8, 0xe8,// 2
0xa8, 0xa8, 0xf8,// 3
0xe0, 0x20, 0xf8,// 4
0xe8, 0xa8, 0xb8,// 5
0xf8, 0xa8, 0xb8,// 6
0x80, 0x80, 0xf8,// 7
0xf8, 0xa8, 0xf8,// 8
0xe8, 0xa8, 0xf8 // 9
};
QueueHandle_t mode = NULL;
ISR (TIMER1_OVF_vect) //Chương trình ngắt Timer1
{ 
   static unsigned char z = 0;// biến đếm hàng;
   unsigned char i;
   digitalWrite (OE, HIGH); // tắt hết LED
   for (i = 0; i < 4; i++){
      data_transfet (Buffer_display[0][z][i], Buffer_display[1][z][i],
                     Buffer_display[2][z][i], Buffer_display[0][z+8][i],
                     Buffer_display[1][z+8][i], Buffer_display[2][z+8][i]);
   }
   rows(z);
   digitalWrite (STB, LOW); digitalWrite (STB, HIGH);
   digitalWrite (OE, LOW);// bật LED
   z++;
   if (z == 8) z = 0;
   delay(1);
   TCNT1= 65300;
}
void setup() {
    Serial.begin (9600);
    Wire.begin();
    pinMode (G1, OUTPUT);// cài đặt chế độ hoạt động của các chân
    pinMode (R1, OUTPUT);
    pinMode (B1, OUTPUT);
    pinMode (R2, OUTPUT);
    pinMode (G2, OUTPUT);
    pinMode (B2, OUTPUT);
    pinMode (A,  OUTPUT);
    pinMode (B,  OUTPUT);
    pinMode (C,  OUTPUT);
    pinMode (CLK, OUTPUT);
    pinMode (OE,  OUTPUT);
    pinMode (STB, OUTPUT);
    pinMode (M, INPUT);
    pinMode (2, INPUT_PULLUP);
    pinMode (3, INPUT_PULLUP);
    mode = xQueueCreate (1, sizeof (int));
    int status = 0;
    xQueueSend(mode, &status, 0);
    attachInterrupt(digitalPinToInterrupt(3),changeOnMode , RISING);
    //attachInterrupt(digitalPinToInterrupt(2),changeMode , RISING);
    getDate();
    cli(); //Tắt ngắt toàn cục
    TCCR1A = 0; //Reset Timer1
    TCCR1B = 0;      
    TIMSK1 = 0;
    TCCR1B |= (1 << CS11); 
    TCNT1= 65500;
    TIMSK1 |= (1 << TOIE1); 
    sei();
    //xTaskCreate (taskDanceMusic,"1", 128, NULL, 2, &danceOfMusicHandle);
    xTaskCreate (taskRealTime,"2", 128, NULL, 2, & realTimeHandle);
    xTaskCreate (animation,"3", 128, NULL, 2, & animationHandle);
}

void loop(){}

void changeOnMode () {
   static int moe = 0 ;
   moe = (++ moe)%3;
   xQueueOverwriteFromISR (mode, &moe, 0);
   vTaskResume(realTimeHandle);
} 
void animation (void *pv){
   int x, y = 0,b;
   while (1){
      xQueuePeek(mode, &b,0);
      if (b == 1) { 
         for (x = 0 ; x < 16; x++){
            draw_icon(x * 4,0,(y+x) % 3 +1 );
            draw_icon1(32 - x * 4,15,(y+x) % 3 +1);
         }
         y++;
         delay(100);
      }else if (b == 0 ){
         for (y = 0; y <7; y++){
            for (x = 0 ; x < 5; x++) {
               if ((dayOfTheWeek[wday-1][0][y] & (0x40 >> x) ) != 0) set_pixel (x + 0, y +9, 0x05);
               else set_pixel (x + 0, y +9 ,0x00);
            }
         }
         vTaskDelay(20);
         for (y = 0; y <7; y++){
            for (x = 0 ; x < 5; x++) {
               if ((dayOfTheWeek[wday-1][1][y] & (0x40 >> x) ) != 0) set_pixel (x + 5, y +9, 0x05);
               else set_pixel (x + 5, y +9 ,0x00);
            }
         }
         vTaskDelay(20);
         for (y = 0; y <7; y++){
            for (x = 0 ; x < 5; x++) {
               if ((dayOfTheWeek[wday - 1][2][y] & (0x40 >> x) ) != 0) set_pixel (x + 10, y +9, 0x05);
               else set_pixel (x + 10, y +9,0x00);
            }
         }
         vTaskDelay(20);
         put_mini_number (16,11,day/10,0x04);
         put_mini_number (20,11,day%10,0x04);
         vTaskDelay(20);
         put_mini_number (25,11,month/10,0x07);
         put_mini_number (29,11,month%10,0x07);
         delay (5000);
         for (x =31; x >=0; x -- ){
            for ( y =9; y < 16;y++){
               set_pixel(x,y,0x00);
            }
            vTaskDelay(5);
         }
         put_char (4,9,2,0x03);
         vTaskDelay(20);
         put_char (10,9,0,0x03);
         vTaskDelay(20);
         put_char (16,9,year /10,0x03);
         vTaskDelay(20);
         put_char (22,9,year %10,0x03);
         delay (5000);
         for (x =31; x >=0; x -- ){
            for ( y =8; y < 16;y++){
               set_pixel(x,y,0x00);
            }
            vTaskDelay(5);
         }  
      }else{
         for (x =0; x<31;x++){
            y = analogRead(M);
            if (y > 507) y = y -508;
            else y = 506- y;
            drawRow (x,y/3);
         }
      }
   }
}
void taskRealTime (void *pv){
   int nowStatus, nextStatus;
   xQueuePeek(mode,&nowStatus, 0);
   while (1){
      xQueuePeek(mode,&nextStatus, 0);
      if (nowStatus != nextStatus) { 
         nowStatus = nextStatus;
         vTaskDelete(animationHandle);
         clear_display();
         xTaskCreate (animation,"3", 128, NULL, 2, & animationHandle);
      }
      if (nowStatus == 0){ 
         getTime();
      }else if (nowStatus == 1) {
         getTime1();
      }else {
         vTaskSuspend(realTimeHandle);
      }
   }
}
void taskDanceMusic (void *pv){
   int i, sensor, sensor2;
   while (1){
      for (i =1; i<31;i++){
         sensor = analogRead(M);
         if (sensor > 507) sensor = sensor -508;
         else sensor = 506- sensor;
         drawRow (i,sensor/3);
      }
   }
}
void data_transfet (char byte_r1, char byte_g1, char byte_b1, char byte_r2, char byte_g2, char byte_b2 ){ // chyển dữ liệu vào màn hình
   unsigned char i, mask;
   for (i = 0; i < 8; i++){
      mask = 0x80 >> i;
      digitalWrite (R1, byte_r1 & mask);
      digitalWrite (G1, byte_g1 & mask);
      digitalWrite (B1, byte_b1 & mask);
      digitalWrite (R2, byte_r2 & mask);
      digitalWrite (G2, byte_g2 & mask);
      digitalWrite (B2, byte_b2 & mask);
      digitalWrite (CLK, LOW); digitalWrite (CLK, HIGH); // tạo xung clk cho phép chuyển dữ liệu
   }
}
void rows (unsigned char row_number){  // chọn hàng được sáng
   switch (row_number){
      case 0:{ digitalWrite(A, LOW);digitalWrite (B, LOW); digitalWrite (C, LOW);break;}
      case 1:{ digitalWrite(A, HIGH);digitalWrite (B, LOW); digitalWrite (C, LOW);break;}
      case 2:{ digitalWrite(A, LOW);digitalWrite (B, HIGH); digitalWrite (C, LOW);break;}
      case 3:{ digitalWrite(A, HIGH);digitalWrite (B, HIGH); digitalWrite (C, LOW);break;}
      case 4:{ digitalWrite(A, LOW);digitalWrite (B, LOW); digitalWrite (C, HIGH);break;}
      case 5:{ digitalWrite(A, HIGH);digitalWrite (B, LOW); digitalWrite (C, HIGH);break;}
      case 6:{ digitalWrite(A, LOW);digitalWrite (B, HIGH); digitalWrite (C, HIGH);break;}
      case 7:{ digitalWrite(A, HIGH);digitalWrite (B, HIGH); digitalWrite (C, HIGH);break;}
   }
}
void set_pixel (unsigned char x, unsigned char y, unsigned char color) {
   if (x >31 || x <0 || y >15|| y <0) return;
   if ((color & 0x01) != 0)  Buffer_display [0][y][x/8] = Buffer_display[0][y][x/8] | (0x80 >> (x %8));
   else Buffer_display[0][y][x/8] = Buffer_display[0][y][x/8] & (~(0x80 >> (x %8)));
   
   if ((color & 0x02) != 0)  Buffer_display [1][y][x/8] = Buffer_display[1][y][x/8] | (0x80 >> (x %8));
   else Buffer_display[1][y][x/8] =Buffer_display[1][y][x/8] & (~(0x80 >> (x %8)));
   
   if ((color & 0x04) != 0)  Buffer_display [2][y][x/8] = Buffer_display[2][y][x/8] | (0x80 >> (x %8));
   else Buffer_display[2][y][x/8] =Buffer_display[2][y][x/8] & (~(0x80 >> (x %8)));
}
void put_char (int i, int j, char txt, char color){ 
   char x =0, y=0, z = txt; 
   for (y = 0; y <7; y++){
      for (x = 0 ; x < 5; x++) {
         if ((font[txt][y] & (0x40 >> x) ) != 0) set_pixel (x + i, y +j, color);
         else set_pixel (x + i, y +j ,0x00);
      }
   }
}
void drawRow(int x,int height){
   int i;
   if (height > 14) height = 14;
   height = 15 - height;
   for (i = 14; i > height +1; i--) set_pixel(x,i,0x02);
   if (i <= 14){ 
      set_pixel (x,i,0x03);
      i--;
   }
   if (i < 13) {
      set_pixel (x,i, 0x01);
      i--;
   }
   for (; i >= 0;i--) set_pixel(x,i,0x00);
   col[x] = height;
}
int bcd2dec(byte num){
   return ((num/16 * 10) + (num % 16));
}
int dec2bcd(byte num){
   return ((num/10 * 16) + (num % 10));
}
void getDate(){
   Wire.beginTransmission(0x68);
   Wire.write ((byte)0x00);
   Wire.endTransmission ();
   Wire.requestFrom (0x68, 7);
   day = Wire.read();
   day = Wire.read();
   day = Wire.read();
   wday = bcd2dec (Wire.read());
   day = bcd2dec (Wire.read());
   month = bcd2dec (Wire.read());
   year = bcd2dec (Wire.read());
}
void getTime(){
   Wire.beginTransmission(0x68);
   Wire.write ((byte)0x00);
   Wire.endTransmission ();
   Wire.requestFrom (0x68, 7);
   int x;
   x = bcd2dec (Wire.read() & 0x7f);
   put_mini_number(24,3,x/10,0x03);
   put_mini_number(28,3,x%10,0x03);
   if (x %2 == 0){ 
      draw_point(11,2,0x01);
      draw_point(11,5,0x01);
   }else {  
      draw_point(11,2,0x00);
      draw_point(11,5,0x00);
   }
   x = bcd2dec (Wire.read());
   put_char(13,1, x/10,0x02);
   put_char(18, 1, x%10, 0x02);
   x = bcd2dec (Wire.read());
   put_char(1,1, x/10,0x02);
   put_char(6, 1, x%10, 0x02);
   if (x == 0){
      getDate();
   }

}
void getTime1(){
   Wire.beginTransmission(0x68);
   Wire.write ((byte)0x00);
   Wire.endTransmission ();
   Wire.requestFrom (0x68, 7);
   int x;
   x = bcd2dec (Wire.read() & 0x7f);
   if (x %2 == 0){ 
      draw_point(15,5,0x02);
      draw_point(15,9,0x02);
   }else {  
      draw_point(15,5,0x00);
      draw_point(15,9,0x00);
   }
   x = bcd2dec (Wire.read());
   put_mini_number_2(18,3,x/10,0x01);
   put_mini_number_2(25,3,x%10,0x01);
   x = bcd2dec (Wire.read());
   put_mini_number_2(1,3,x/10,0x01);
   put_mini_number_2(8,3,x%10,0x01);
   if (x == 0){
      getDate();
   }
}
void draw_point (int x, int y, char color){
   set_pixel (x ,y, color);
   set_pixel (x+1,y, color);
   set_pixel (x+1,y+1, color);
   set_pixel (x,y+1, color);
}
void put_mini_number(int i, int j, char txt, char color){
   char x, y;
   for (y = 0; y <3; y++){
      for (x = 0 ; x < 5; x++) {
         if ((miniFont[txt][y] & (0x80 >> x)) != 0) set_pixel(y+i, x+j, color);
         else set_pixel(y+i, x+j, 0x00);
      }
   }
}
void put_mini_number_2(int i, int j, char txt, char color){
   char x, y;
   for (y = 0; y <3; y++){
      for (x = 0 ; x < 5; x++) {
         if ((miniFont[txt][y] & (0x80 >> x)) != 0) draw_point(2*y +i, x*2 +j, color);
         else draw_point(2*y +i, x*2 +j, 0x00);
      }
   }
}
void draw_icon(int x, int y, char color){
   set_pixel (x , y, color);
   set_pixel (x+1 , y+1, color);
   set_pixel (x+1 , y, color);
   set_pixel (x+2 , y, color);
}
void draw_icon1(int x, int y, char color){
   set_pixel (x , y, color);
   set_pixel (x+1 , y-1, color);
   set_pixel (x+1 , y, color);
   set_pixel (x+2 , y, color);
}
void clear_display (){
   unsigned char i, j;
   for (i = 0;i < 16; i++)
   for (j =0; j < 32; j++){
      set_pixel(j,i,0x00);
   }
}